Description: >
    Kamran Taherpour / Udacity Devops Capstone Project
    This template deploys a Jenkins server, a Ubuntu Dev server and an Amazon EKS Setup

Parameters:
    EnvironmentName:
        Default: CapstoneEnvName
        Description: This the Environment Name for the Capstone Project
        Type: AWS::SSM::Parameter::Value<String>

Resources:
    # Network Setup Here
    VPC: 
        Properties:
            CidrBlock: '10.0.0.0/16'
            EnableDnsHostnames: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName}-VPC
        Type: AWS::EC2::VPC
    InternetGateway:
        Properties:
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName}-InternetGateway
        Type: AWS::EC2::InternetGateway
    InternetGatewayAttachment:
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC
        Type: AWS::EC2::VPCGatewayAttachment
    PublicSubnet1: 
        Properties:
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: '10.0.1.0/24'
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName}-PublicSubnet1
            VpcId: !Ref VPC
        Type: AWS::EC2::Subnet
    PublicSubnet2: 
        Properties:
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: '10.0.2.0/24'
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName}-PublicSubnet2
            VpcId: !Ref VPC
        Type: AWS::EC2::Subnet
    PublicRouteTable:
        Properties: 
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName}-PublicRouteTable
            VpcId: !Ref VPC
        Type: AWS::EC2::RouteTable
    DefaultPublicRoute: 
        DependsOn: InternetGatewayAttachment
        Properties: 
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway
            RouteTableId: !Ref PublicRouteTable
        Type: AWS::EC2::Route
    PublicSubnet1RouteTableAssociation:
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1
        Type: AWS::EC2::SubnetRouteTableAssociation
    PublicSubnet2RouteTableAssociation:
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2
        Type: AWS::EC2::SubnetRouteTableAssociation

    # Security Groups
    EC2SecGroup:
        Properties:
            GroupDescription: Allow http to our Jenkins Server for my IP Only
            SecurityGroupEgress:
            - CidrIp: 0.0.0.0/0
              FromPort: 0
              IpProtocol: tcp
              ToPort: 65535
            - CidrIp: 68.5.250.5/32
              FromPort: 8080
              IpProtocol: tcp
              ToPort: 8080
            - CidrIp: 68.5.250.5/32
              FromPort: 22
              IpProtocol: tcp
              ToPort: 22
            SecurityGroupIngress:
            - CidrIp: 68.5.250.5/32
              FromPort: 80
              IpProtocol: tcp
              ToPort: 80
            - CidrIp: 68.5.250.5/32
              FromPort: 8080
              IpProtocol: tcp
              ToPort: 8080
            - CidrIp: 68.5.250.5/32
              FromPort: 22
              IpProtocol: tcp
              ToPort: 22
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName}-EC2SecGroup
            VpcId: !Ref VPC
        Type: AWS::EC2::SecurityGroup
    SecGroup:
        Properties:
            GroupDescription: Allow http to our load balancer
            SecurityGroupEgress:
            - CidrIp: 68.5.250.5/32
              FromPort: 0
              IpProtocol: tcp
              ToPort: 65535
            SecurityGroupIngress:
            - CidrIp: 68.5.250.5/32
              FromPort: 8080
              IpProtocol: tcp
              ToPort: 8080
            - CidrIp: 68.5.250.5/32
              FromPort: 80
              IpProtocol: tcp
              ToPort: 80
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName}-SecGroup
            VpcId: !Ref VPC
        Type: AWS::EC2::SecurityGroup

    # IAM Roles
    EKSClusterRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                - Effect: Allow
                  Principal:
                    Service:
                    - eks.amazonaws.com
                  Action:
                  - sts:AssumeRole
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName}-EKSClusterRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

    EKSNodeRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                - Effect: Allow
                  Principal:
                    Service:
                    - ec2.amazonaws.com
                  Action:
                  - sts:AssumeRole
            ManagedPolicyArns:
            - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
            - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
            - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName}-EKSNodeRole

    # Jenkins Server Setup
    JenkinsInstance:
      Properties:
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '8'
        InstanceType: t2.micro
        ImageId: ami-09dd2e08d601bff67
        KeyName: "kamiackeypair"
        NetworkInterfaces: 
          - AssociatePublicIpAddress: "true"
            DeviceIndex: "0"
            GroupSet: 
              - Ref: EC2SecGroup
            SubnetId: 
              Ref: "PublicSubnet1"
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            #--Setup Server--
            apt-get update -y
            # Install Unzip
            apt install unzip
            # Get Hadolint
            wget -O /usr/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.17.6/hadolint-Linux-x86_64
            chmod +x /usr/bin/hadolint
            # Python 3 - Required for Boto
            apt install python3-pip -y
            # Install JQ for JSON Parsing
            apt install jq
            # Java Runtime for Jenkins
            apt install default-jdk -y
            # Tidy Used for Jenkins Linting
            apt install tidy -y
            # Docker Setup
            apt install docker.io -y
            # Ansible Setup
            apt install ansible -y
            # Boto Setup
            pip3 install boto
            # AWS CLI V2
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
            # Install Kubectl
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            # Install eksctl
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/0.20.0-rc.0/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            # Add Jenkins Key and Source List to Server
            wget -q -O - https://pkg.Jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -
            sh -c "echo 'deb https://pkg.jenkins.io/debian-stable binary/' > /etc/apt/sources.list.d/jenkins.list"
            apt-get update
            # Start Jenkins and Setup to Run when Ubunto Starts
            apt install jenkins -y
            # Adding Jenkins to the Docker Security Group (Allow Aqua MicroScanner Access to Scan)
            usermod -a -G docker jenkins
            systemctl start jenkins
            systemctl enable jenkins
            systemctl status jenkins
      Type: AWS::EC2::Instance

    # Dev Server Setup
    UbuntuDevInstance:
      Properties:
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '8'
        InstanceType: t2.micro
        ImageId: ami-09dd2e08d601bff67
        KeyName: "kamiackeypair"
        NetworkInterfaces: 
          - AssociatePublicIpAddress: "true"
            DeviceIndex: "0"
            GroupSet: 
              - Ref: EC2SecGroup
            SubnetId: 
              Ref: "PublicSubnet1"
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            #--Setup Server--
            apt-get update -y
            # Install Unzip
            apt install unzip
            # Install JQ for JSON Parsing
            apt install jq -y
            # Python, Python 3 and Python 3 Virtual Environment
            apt install python-pip -y
            apt install python3-pip -y
            apt-get install python3-venv -y
            # Make
            pip3 install make
            # Docker Setup
            apt install docker.io -y
            apt-get update -y
            groupadd docker
            usermod -aG docker ubuntu
            # Get Hadolint
            wget -O /usr/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.17.6/hadolint-Linux-x86_64
            chmod +x /usr/bin/hadolint
            # Setup Git
            git config --global user.name "kamranhastam"
            git config --global user.email "kamran_t10@yahoo.com"
            # AWS CLI V2
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
            # Install Kubectl
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            # Install eksctl
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/0.20.0-rc.0/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            # Generate SSH Key
            ssh-keygen -t rsa
      Type: AWS::EC2::Instance

    # EKS Setup
    EKSCluster:
        DependsOn:
            - EKSClusterRole
        Type: 'AWS::EKS::Cluster'
        Properties:
            Name: capstone-ekscluster
            Version: '1.16'
            RoleArn:  
                Fn::GetAtt: [ EKSClusterRole, Arn ]
            ResourcesVpcConfig:
                SecurityGroupIds:
                - !Ref SecGroup
                SubnetIds:
                - !Ref PublicSubnet1
                - !Ref PublicSubnet2
            
    EKSNodegroup:
        DependsOn: 
            - EKSNodeRole
            - EKSCluster
        Type: 'AWS::EKS::Nodegroup'
        Properties:
            ClusterName: capstone-ekscluster
            NodeRole: !GetAtt EKSNodeRole.Arn
            ScalingConfig:
                MinSize: 1
                DesiredSize: 1
                MaxSize: 1
            Labels:
                Key1: !Sub ${EnvironmentName}-EKSNodegroup
            Subnets:
                - !Ref PublicSubnet1
                - !Ref PublicSubnet2

Outputs: 
    VPC: 
        Description: A reference to the created VPC
        Export:
          Name: !Sub ${EnvironmentName}-VPCID
        Value: !Ref VPC
    JenkinsInstanceIP: 
        Description: A reference to the created Jenkins EC2 IP
        Export:
          Name: !Sub ${EnvironmentName}-JenkinsInstanceID
        Value: !GetAtt JenkinsInstance.PublicIp
    UbuntuDevInstanceIP:
        Description: A reference to the created Ubuntu Dev EC2 IP
        Export:
          Name: !Sub ${EnvironmentName}-UbuntuDevInstanceID
        Value: !GetAtt UbuntuDevInstance.PublicIp
    EKSClusterInstanceARN:
        Description: A reference to the created EKS Cluster
        Export:
          Name: !Sub ${EnvironmentName}-EKSClusterARN
        Value: !GetAtt EKSCluster.Arn
    EKSClusterRoleArn: 
        Description: A reference to the created EKSClusterRoleArn
        Export:
          Name: !Sub ${EnvironmentName}-EKSClusterRole
        Value: !GetAtt EKSClusterRole.Arn
